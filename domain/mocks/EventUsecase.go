// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/San-Kun/MiniProject/domain"
	request "github.com/San-Kun/MiniProject/domain/web/request"

	mock "github.com/stretchr/testify/mock"

	response "github.com/San-Kun/MiniProject/domain/web/response"
)

// EventUsecase is an autogenerated mock type for the EventUsecase type
type EventUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *EventUsecase) Create(_a0 request.EventCreateRequest) (*domain.Event, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Event
	if rf, ok := ret.Get(0).(func(request.EventCreateRequest) *domain.Event); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.EventCreateRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0
func (_m *EventUsecase) Login(_a0 request.LoginRequest) (*response.SuccessLogin, error) {
	ret := _m.Called(_a0)

	var r0 *response.SuccessLogin
	if rf, ok := ret.Get(0).(func(request.LoginRequest) *response.SuccessLogin); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.SuccessLogin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.LoginRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAll provides a mock function with given fields:
func (_m *EventUsecase) ReadAll() (*domain.Events, error) {
	ret := _m.Called()

	var r0 *domain.Events
	if rf, ok := ret.Get(0).(func() *domain.Events); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Events)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadByID provides a mock function with given fields: id
func (_m *EventUsecase) ReadByID(id int) (*domain.Event, error) {
	ret := _m.Called(id)

	var r0 *domain.Event
	if rf, ok := ret.Get(0).(func(int) *domain.Event); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: id
func (_m *EventUsecase) Delete(id int) (*domain.Event, error) {
	ret := _m.Called(id)

	var r0 *domain.Event
	if rf, ok := ret.Get(0).(func(int) *domain.Event); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: id
func (_m *EventUsecase) Updates(id int) (*domain.Event, error) {
	ret := _m.Called(id)

	var r0 *domain.Event
	if rf, ok := ret.Get(0).(func(int) *domain.Event); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}