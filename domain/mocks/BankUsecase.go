// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/San-Kun/MiniProject/domain"
	request "github.com/San-Kun/MiniProject/domain/web/request"

	mock "github.com/stretchr/testify/mock"

	response "github.com/San-Kun/MiniProject/domain/web/response"
)

// BankUsecase is an autogenerated mock type for the BankUsecase type 
type BankUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *BankUsecase) Create(_a0 request.BankCreateRequest) (*domain.Bank, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Bank
	if rf, ok := ret.Get(0).(func(request.BankCreateRequest) *domain.Bank); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bank)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.BankCreateRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0
func (_m *BankUsecase) Login(_a0 request.LoginRequest) (*response.SuccessLogin, error) {
	ret := _m.Called(_a0)

	var r0 *response.SuccessLogin
	if rf, ok := ret.Get(0).(func(request.LoginRequest) *response.SuccessLogin); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.SuccessLogin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.LoginRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAll provides a mock function with given fields:
func (_m *BankUsecase) ReadAll() (*domain.Banks, error) {
	ret := _m.Called()

	var r0 *domain.Banks
	if rf, ok := ret.Get(0).(func() *domain.Banks); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Banks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadByID provides a mock function with given fields: id
func (_m *BankUsecase) ReadByID(id int) (*domain.Bank, error) {
	ret := _m.Called(id)

	var r0 *domain.Bank
	if rf, ok := ret.Get(0).(func(int) *domain.Bank); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bank)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: id
func (_m *BankUsecase) Delete(id int) (*domain.Bank, error) {
	ret := _m.Called(id)

	var r0 *domain.Bank
	if rf, ok := ret.Get(0).(func(int) *domain.Bank); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bank)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: id
func (_m *BankUsecase) Updates(id int) (*domain.Bank, error) {
	ret := _m.Called(id)

	var r0 *domain.Bank
	if rf, ok := ret.Get(0).(func(int) *domain.Bank); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bank)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}